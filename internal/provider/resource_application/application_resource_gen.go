// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_application

import (
	"context"
	"github.com/Lenstra/terraform-provider-logto/internal/provider/planmodifiers/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ApplicationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cors_allowed_origins": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The unique identifier of the application.",
				MarkdownDescription: "The unique identifier of the application.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"is_admin": schema.BoolAttribute{
				Computed: true,
			},
			"is_third_party": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 256),
				},
			},
			"post_logout_redirect_uris": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.NullIsEmpty(),
				},
			},
			"redirect_uris": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.NullIsEmpty(),
				},
			},
			"tenant_id": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Native",
						"SPA",
						"Traditional",
						"MachineToMachine",
						"Protected",
						"SAML",
					),
				},
			},
		},
	}
}

type ApplicationModel struct {
	CorsAllowedOrigins     types.List   `tfsdk:"cors_allowed_origins"`
	Description            types.String `tfsdk:"description"`
	Id                     types.String `tfsdk:"id"`
	IsAdmin                types.Bool   `tfsdk:"is_admin"`
	IsThirdParty           types.Bool   `tfsdk:"is_third_party"`
	Name                   types.String `tfsdk:"name"`
	PostLogoutRedirectUris types.List   `tfsdk:"post_logout_redirect_uris"`
	RedirectUris           types.List   `tfsdk:"redirect_uris"`
	TenantId               types.String `tfsdk:"tenant_id"`
	Type                   types.String `tfsdk:"type"`
}
