// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_user

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"profile": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"family_name": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"given_name": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"middle_name": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"nickname": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: ProfileType{
					ObjectType: types.ObjectType{
						AttrTypes: ProfileValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"username": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Username for the user. It should be unique across all users.",
				MarkdownDescription: "Username for the user. It should be unique across all users.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[A-Z_a-z]\\w*$"), ""),
				},
			},
		},
	}
}

type UserModel struct {
	Id       types.String `tfsdk:"id"`
	Name     types.String `tfsdk:"name"`
	Profile  ProfileValue `tfsdk:"profile"`
	Username types.String `tfsdk:"username"`
}

var _ basetypes.ObjectTypable = ProfileType{}

type ProfileType struct {
	basetypes.ObjectType
}

func (t ProfileType) Equal(o attr.Type) bool {
	other, ok := o.(ProfileType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ProfileType) String() string {
	return "ProfileType"
}

func (t ProfileType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	familyNameAttribute, ok := attributes["family_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family_name is missing from object`)

		return nil, diags
	}

	familyNameVal, ok := familyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family_name expected to be basetypes.StringValue, was: %T`, familyNameAttribute))
	}

	givenNameAttribute, ok := attributes["given_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`given_name is missing from object`)

		return nil, diags
	}

	givenNameVal, ok := givenNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`given_name expected to be basetypes.StringValue, was: %T`, givenNameAttribute))
	}

	middleNameAttribute, ok := attributes["middle_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`middle_name is missing from object`)

		return nil, diags
	}

	middleNameVal, ok := middleNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`middle_name expected to be basetypes.StringValue, was: %T`, middleNameAttribute))
	}

	nicknameAttribute, ok := attributes["nickname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nickname is missing from object`)

		return nil, diags
	}

	nicknameVal, ok := nicknameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nickname expected to be basetypes.StringValue, was: %T`, nicknameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ProfileValue{
		FamilyName: familyNameVal,
		GivenName:  givenNameVal,
		MiddleName: middleNameVal,
		Nickname:   nicknameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewProfileValueNull() ProfileValue {
	return ProfileValue{
		state: attr.ValueStateNull,
	}
}

func NewProfileValueUnknown() ProfileValue {
	return ProfileValue{
		state: attr.ValueStateUnknown,
	}
}

func NewProfileValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ProfileValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ProfileValue Attribute Value",
				"While creating a ProfileValue value, a missing attribute value was detected. "+
					"A ProfileValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProfileValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ProfileValue Attribute Type",
				"While creating a ProfileValue value, an invalid attribute value was detected. "+
					"A ProfileValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProfileValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ProfileValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ProfileValue Attribute Value",
				"While creating a ProfileValue value, an extra attribute value was detected. "+
					"A ProfileValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ProfileValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewProfileValueUnknown(), diags
	}

	familyNameAttribute, ok := attributes["family_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family_name is missing from object`)

		return NewProfileValueUnknown(), diags
	}

	familyNameVal, ok := familyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family_name expected to be basetypes.StringValue, was: %T`, familyNameAttribute))
	}

	givenNameAttribute, ok := attributes["given_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`given_name is missing from object`)

		return NewProfileValueUnknown(), diags
	}

	givenNameVal, ok := givenNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`given_name expected to be basetypes.StringValue, was: %T`, givenNameAttribute))
	}

	middleNameAttribute, ok := attributes["middle_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`middle_name is missing from object`)

		return NewProfileValueUnknown(), diags
	}

	middleNameVal, ok := middleNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`middle_name expected to be basetypes.StringValue, was: %T`, middleNameAttribute))
	}

	nicknameAttribute, ok := attributes["nickname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nickname is missing from object`)

		return NewProfileValueUnknown(), diags
	}

	nicknameVal, ok := nicknameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nickname expected to be basetypes.StringValue, was: %T`, nicknameAttribute))
	}

	if diags.HasError() {
		return NewProfileValueUnknown(), diags
	}

	return ProfileValue{
		FamilyName: familyNameVal,
		GivenName:  givenNameVal,
		MiddleName: middleNameVal,
		Nickname:   nicknameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewProfileValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ProfileValue {
	object, diags := NewProfileValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewProfileValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ProfileType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewProfileValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewProfileValueUnknown(), nil
	}

	if in.IsNull() {
		return NewProfileValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewProfileValueMust(ProfileValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ProfileType) ValueType(ctx context.Context) attr.Value {
	return ProfileValue{}
}

var _ basetypes.ObjectValuable = ProfileValue{}

type ProfileValue struct {
	FamilyName basetypes.StringValue `tfsdk:"family_name"`
	GivenName  basetypes.StringValue `tfsdk:"given_name"`
	MiddleName basetypes.StringValue `tfsdk:"middle_name"`
	Nickname   basetypes.StringValue `tfsdk:"nickname"`
	state      attr.ValueState
}

func (v ProfileValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["family_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["given_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["middle_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nickname"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.FamilyName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["family_name"] = val

		val, err = v.GivenName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["given_name"] = val

		val, err = v.MiddleName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["middle_name"] = val

		val, err = v.Nickname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nickname"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ProfileValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ProfileValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ProfileValue) String() string {
	return "ProfileValue"
}

func (v ProfileValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"family_name": basetypes.StringType{},
		"given_name":  basetypes.StringType{},
		"middle_name": basetypes.StringType{},
		"nickname":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"family_name": v.FamilyName,
			"given_name":  v.GivenName,
			"middle_name": v.MiddleName,
			"nickname":    v.Nickname,
		})

	return objVal, diags
}

func (v ProfileValue) Equal(o attr.Value) bool {
	other, ok := o.(ProfileValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FamilyName.Equal(other.FamilyName) {
		return false
	}

	if !v.GivenName.Equal(other.GivenName) {
		return false
	}

	if !v.MiddleName.Equal(other.MiddleName) {
		return false
	}

	if !v.Nickname.Equal(other.Nickname) {
		return false
	}

	return true
}

func (v ProfileValue) Type(ctx context.Context) attr.Type {
	return ProfileType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ProfileValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"family_name": basetypes.StringType{},
		"given_name":  basetypes.StringType{},
		"middle_name": basetypes.StringType{},
		"nickname":    basetypes.StringType{},
	}
}
